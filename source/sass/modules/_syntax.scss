/* 
@include font-face();
@include box-shadow();
@include box-sizing();
@include transition(); 
@include transform();
@include transform-origin();
@include transform3d();
@include perspective();
@include backface-visibility();
@include display-flex(inline-flex); 		 flex (default), inline-flex
@include align-items(center);				 flex-start | flex-end | center | baseline | stretch
@include justify-content(center);			 flex-start | flex-end | center | space-between | space-around
@include align-content();					 flex-start | flex-end | center | space-between | space-around | stretch
@include text-shadow();
@include opacity();
@include background(image-url("foo.png"),
  linear-gradient(to bottom right, #333, #0c0),
  radial-gradient(#c00, #fff 100px));

http://12devs.co.uk/articles/handy-advanced-sass/
*/

// Placeholder Selectors
%button {
  min-width: 100px;
  padding: 1em;
  border-radius: 1em;
}
%twitter-background {
  color: #fff;
  background: #55acee;
}
%facebook-background {
  color: #fff;
  background: #3b5998;
}

.btn {
  &-twitter {
    @extend %button;
    @extend %twitter-background;
  }
  &-facebook {
    @extend %button;
    @extend %facebook-background;
  }
}
// @extend with class
.inline-block {
  display: inline-block; 
  vertical-align: baseline; 
  *display: inline; 
  *vertical-align: auto;
  *zoom: 1;
}
.btn {
  @extend .inline-block;
  padding: 0.5em 1em;
}
// @extend with selector
a:hover{
  text-decoration: underline;
}
.hoverlink{
  @extend a:hover;
}

// unknown number of arguments
@mixin colors($text, $background, $border) {
  color: $text;
  background-color: $background;
  border-color: $border;
}

$value-map: (text: #00ff00, background: #0000ff, border: #ff0000);
.secondary {
  @include colors($value-map...);
} 

@mixin transform($transforms...) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
          transform: $transforms;

// added in  Sass 3.1.0
@function set-textColor($color) {
  @if (lightness($color) > 50) {
    @return #000000; // Lighter backgorund, return dark color
  } @else {
    @return #ffffff; // Darker background, return light color
  }
}

// from ... through : include the last index
// from ... to: except the last index
$columns: 4;
@for $i from 1 through $columns {
  .cols-#{$i} {
    width: ((100 / $columns) * $i) * 1%;
  }
}

@while $columns > 0 {
  .cols-#{$columns} {
    width: 10px * $columns;
  }
  $columns: $columns - 1;
}

@for $i from 1 to $columns {
  .cols-#{$i} {
    width: ((100 / $columns) * $i) * 1%;
  }
}

// @each
$icons: success error warning;
@each $icon in $icons {
  .icon-#{$icon} {
    background-image: url(/images/icons/#{$icon}.png);
  }
}

// @content
@mixin apply-to-ie7 {
  *:first-child+html & {
    @content;
  }
}
.btn {
  display: inline-block;
  @include apply-to-ie7 {
    overflow: visible;
    display: inline;
    zoom: 1;
  }
}

// set size for headers
@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}

// API Functions: if, length, nth(arr, index), index(arr, item)
$colours: red green blue;
.foo {
  width: if($bar, 100%, 50%);
} 
@for $i from 1 through length($colours) {
  .rgb:nth-of-type(#{$i}) {
    background-color: nth($colours, $i);
  }
}
@each $colour in $colours {
	.rgb:nth-of-type(#{index($colours, $colour)}) {
	 	background-color: $colour;
	}
}


// Compass features
/* Set font-weight to h1, h2, h3 */
#{headings(1, 3)} {
	font-weight: bold;
}
/* Set for all headings */
#{headings()} {
	text-transform: uppercase;	
}
// -o-, -ms- (and -khtml-) are omitted => specifically specifying not to output lines for Opera and Internet Explorer
@mixin box-sizing($bs) {
  $bs: unquote($bs);
  @include experimental(box-sizing, $bs, -moz, -webkit, not -o, not -ms, not -khtml, official);
}
// @include box-sizing(border-box);

// Single-line comment won't appear in the CSS output
// Mixin definitions can also include other mixins
/* Placeholder selectors(%) will not show up in the generated CSS, 
only the selectors that extend them will be included in the output.
One limitation with @extend: it doesn't work between rules in different @media blocks. */
#placeholder{
	@media screen{
		%btn{
			min-width: 100px;
			padding: 1em;
		}
		.button{
			&--twitter{
				@extend %btn;
				background: #eee;
			}
			&--facebook{
				@extend %btn;
				background: #ccc;
				$width: 5px !global;
			}
		}
	}
}
#nestled{
	@media screen{
		.sidebar{
			@media (orientation: landscape){
				width: 500px;
			}
		}
	}

	.message {
	  border: 1px solid #ccc;
	  padding: 10px;
	  color: #333;
	}

	.success {
	  @extend .message;
	  border-color: green;
	  width: 300px / 960px * 100%;
	}
}

// if the variable has already been assigned to, it won’t be re-assigned, 
// but if it doesn’t have a value yet, it will be given one.
#variable{
	$content: "First content";
	$content: "Second content?" !default;
	#main {
		@debug "Output is #{content}";
		content: $content;
	}
}

#loop{
	// starts at <start> and loops "through" each iteration and ends at <end>
	@for $i from 1 through 3 {
	  .item-#{$i} { width: 2em * $i; }
	}
	//starts at <start> and loops through each iteration "to" <end> and stops
	@for $i from 1 to 3{
		.item-#{$i} { @include mesg(".header");}
	}
	@each $animal in puma, sea-slug, egret, salamander {
	  .#{$animal}-icon {
	    background-image: url('/images/#{$animal}.png');
	  }
	}
	@each $animal, $color, $cursor in (puma, black, default),(sea-slug, blue, pointer), (egret, white, move) {
	  .#{$animal}-icon {
	    background-image: url('/images/#{$animal}.png');
	    border: 2px solid $color;
	    cursor: $cursor;
	  }
	}
	@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
	  #{$header} {
	    font-size: $size;
	  }
	}
	$list: adam john wynn;
	@each $author in $list{
		.photo-#{$author}{ background: url("avatars/#{$author}.png") no-repeat; }
	}
	$i: 6;
	@while $i > 0 {
	  .item-#{$i} { width: 2em * $i; }
	  $i: $i - 2;
	}	
}


$btn-name: blue, red, yellow;
$btn-value: $blue, $red, $yellow;
@each $name in $btn-name{
  $i: index($btn-name, $name);
  .btn-#{$name}{
    background-color: nth($btn-value, $i);
  }
}


//unknown number of arguments
#unknownArg01{
	@mixin box-shadow($shadows...) {
		-moz-box-shadow: $shadows;
		-webkit-box-shadow: $shadows;
		box-shadow: $shadows;
	}

	.shadows {
	  @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
	}
}
#unknownArg02{
	@mixin colors($text, $background, $border) {
	  color: $text;
	  background-color: $background;
	  border-color: $border;
	}

	$values: #ff0000, #00ff00, #0000ff;
	.primary {
	  @include colors($values...);
	}

	$value-map: (text: #00ff00, background: #0000ff, border: #ff0000);
	.secondary {
	  @include colors($value-map...);
	}	
}


